name: Terraform Deploy

on:
  push:
    branches:
      - feature/DeploymentAWS
  pull_request:
    branches:
      - feature/DeploymentAWS

env:
  TF_VERSION: "1.5.0"
  AWS_REGION: us-west-2
  ENVIRONMENT: production

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.vars.outputs.sha_short }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Get short SHA
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build Services
        run: |
          mvn clean package -f PurchaseService/pom.xml -DskipTests
          mvn clean package -f QueryService/pom.xml -DskipTests
          mvn clean package -f MqProjectionService/pom.xml -DskipTests

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and Push Docker Images
        run: |
          for service in PurchaseService QueryService MqProjectionService; do
            docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/$(echo $service | tr '[:upper:]' '[:lower:]'):${{ steps.vars.outputs.sha_short }} ./$service
            docker push ${{ secrets.DOCKER_HUB_USERNAME }}/$(echo $service | tr '[:upper:]' '[:lower:]'):${{ steps.vars.outputs.sha_short }}
            docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/$(echo $service | tr '[:upper:]' '[:lower:]'):${{ steps.vars.outputs.sha_short }} ${{ secrets.DOCKER_HUB_USERNAME }}/$(echo $service | tr '[:upper:]' '[:lower:]'):latest
            docker push ${{ secrets.DOCKER_HUB_USERNAME }}/$(echo $service | tr '[:upper:]' '[:lower:]'):latest
          done

  terraform-plan:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: deployment/terraform/environments/${{ env.ENVIRONMENT }}
        run: terraform init

      - name: Terraform Validate
        working-directory: deployment/terraform/environments/${{ env.ENVIRONMENT }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: deployment/terraform/environments/${{ env.ENVIRONMENT }}
        run: |
          terraform plan \
            -var="image_tag=${{ needs.build-and-push.outputs.image-tag }}" \
            -var="docker_hub_username=${{ secrets.DOCKER_HUB_USERNAME }}" \
            -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tfplan
          path: deployment/terraform/environments/${{ env.ENVIRONMENT }}/tfplan

  terraform-apply:
    needs: [build-and-push, terraform-plan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/DeploymentAWS'
    environment: production

    steps:
      - uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v3
        with:
          name: tfplan
          path: deployment/terraform/environments/${{ env.ENVIRONMENT }}

      - name: Terraform Init
        working-directory: deployment/terraform/environments/${{ env.ENVIRONMENT }}
        run: terraform init

      - name: Terraform Apply
        working-directory: deployment/terraform/environments/${{ env.ENVIRONMENT }}
        run: terraform apply -auto-approve tfplan

      - name: Get Terraform Outputs
        id: outputs
        working-directory: deployment/terraform/environments/${{ env.ENVIRONMENT }}
        run: |
          echo "alb_url=$(terraform output -raw alb_url)" >> $GITHUB_OUTPUT
          echo "ALB URL: $(terraform output -raw alb_url)"
          echo "RDS Endpoint: $(terraform output -raw rds_endpoint)"
          echo "Redis Endpoint: $(terraform output -raw redis_endpoint)"
          echo "Kafka Bootstrap Servers: $(terraform output -raw kafka_bootstrap_servers)"

    outputs:
      alb_url: ${{ steps.outputs.outputs.alb_url }}

  smoke-tests:
    needs: terraform-apply
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Wait for services to be healthy
        run: sleep 60

      - name: Run smoke tests
        run: |
          ALB_URL=$(aws elbv2 describe-load-balancers --region ${{ env.AWS_REGION }} --names production-ticketing-alb --query 'LoadBalancers[0].DNSName' --output text)

          echo "Testing ALB URL: ${ALB_URL}"

          # Test Purchase Service Health
          curl -f http://${ALB_URL}/api/v1/health || exit 1

          # Test Query Service Health
          curl -f http://${ALB_URL}/api/v1/tickets/health || exit 1

          # Test Create Ticket
          curl -X POST -H "Content-Type: application/json" \
            -d '{"venueId":"V1","eventId":"E1","zoneId":1,"row":"A","column":"1"}' \
            http://${ALB_URL}/api/v1/tickets
