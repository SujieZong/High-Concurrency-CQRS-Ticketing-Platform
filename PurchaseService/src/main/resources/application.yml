# common setting
spring:
  application:
    name: PurchaseService
  main:
    web-application-type: servlet
  docker:
    compose:
      enabled: false

  cloud:
    stream:
      defaultBinder: rabbit
      bindings:
        #Sender bind channel
        ticket-out-0:
          destination: ticket.exchange
          contentType: application/json
      rabbit:
        bindings:
          ticket-out-0:
            producer:
              exchangeType: topic
              routingKeyExpression: '''ticket.created'''
              declareExchange: true

  rabbitmq:
    host: ${SPRING_RABBITMQ_HOST}
    port: ${SPRING_RABBITMQ_PORT:5672}
    username: ${SPRING_RABBITMQ_USERNAME}
    password: ${SPRING_RABBITMQ_PASSWORD}

  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST}
      port: ${SPRING_DATA_REDIS_PORT:6379}
      password: ${SPRING_DATA_REDIS_PASSWORD:}
      timeout: ${SPRING_DATA_REDIS_TIMEOUT:5000}
      lettuce:
        pool:
          max-active: ${SPRING_DATA_REDIS_POOL_MAX_ACTIVE:8}
          max-idle: ${SPRING_DATA_REDIS_POOL_MAX_IDLE:8}
          min-idle: ${SPRING_DATA_REDIS_POOL_MIN_IDLE:0}
          max-wait: ${SPRING_DATA_REDIS_POOL_MAX_WAIT:-1ms}

  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      minimum-idle: ${SPRING_DS_MIN_IDLE:5}
      maximum-pool-size: ${SPRING_DS_MAX_POOL:20}
      connection-timeout: ${SPRING_DS_CONN_TIMEOUT:30000}

app:
  dynamo:
    table:
      outbox: OutboxEvent

aws:
  dynamodb:
    region: ${AWS_DYNAMODB_REGION}
    end-point: ${AWS_DYNAMODB_END_POINT}
    access-key: ${AWS_DYNAMODB_ACCESS_KEY}
    access-pass: ${AWS_DYNAMODB_ACCESS_PASS}

logging:
  file:
    name: ./logs/purchase-service.log
  level:
    root: INFO
    org.java.purchaseservice: DEBUG

# 启动期是否向 Redis 预热场馆/座区（本地调试可关）
tickets:
  bootstrap:
    venue-redis: ${TICKETS_BOOTSTRAP_VENUE_REDIS:true}
