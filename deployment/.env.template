# =====================================================
# CQRS Ticketing Platform Environment Configuration
# 
# This is a template file with placeholder values.
# =====================================================

# ===== DEPLOYMENT ENVIRONMENT =====
# Options: local, aws, production
DEPLOYMENT_ENV=local

# ===== KAFKA CONFIGURATION =====
# CLUSTER_ID is automatically generated by build.sh script
# DO NOT manually set CLUSTER_ID here - it will be created dynamically

# Local Kafka (Docker Compose)
KAFKA_BROKERS_LOCAL=kafka-1:9092,kafka-2:9092,kafka-3:9092
# AWS MSK (Amazon Managed Streaming for Apache Kafka)
KAFKA_BROKERS_AWS=b-1.your-cluster.kafka.us-west-2.amazonaws.com:9092,b-2.your-cluster.kafka.us-west-2.amazonaws.com:9092
# Production Kafka
KAFKA_BROKERS_PROD=prod-kafka-1:9092,prod-kafka-2:9092,prod-kafka-3:9092

# Consumer Configuration
KAFKA_CONSUMER_CONCURRENCY=6

# ===== DATABASE CONFIGURATION =====

# ----- MySQL Configuration -----
# Local MySQL (Docker) - Docker Compose MySQL container
SPRING_DATASOURCE_URL_LOCAL=jdbc:mysql://mysql:3306/ticket_platform?serverTimezone=UTC
SPRING_DATASOURCE_USERNAME_LOCAL=root
SPRING_DATASOURCE_PASSWORD_LOCAL=root

# AWS RDS MySQL
SPRING_DATASOURCE_URL_AWS=jdbc:mysql://your-rds-endpoint.amazonaws.com:3306/ticket_platform?serverTimezone=UTC
SPRING_DATASOURCE_USERNAME_AWS=${AWS_RDS_USERNAME}
SPRING_DATASOURCE_PASSWORD_AWS=${AWS_RDS_PASSWORD}

# Production MySQL
SPRING_DATASOURCE_URL_PROD=jdbc:mysql://prod-mysql:3306/ticket_platform?serverTimezone=UTC
SPRING_DATASOURCE_USERNAME_PROD=${PROD_DB_USERNAME}
SPRING_DATASOURCE_PASSWORD_PROD=${PROD_DB_PASSWORD}

# Active Configuration (automatically set based on DEPLOYMENT_ENV)
SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL_LOCAL}
SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME_LOCAL}
SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD_LOCAL}

# Database Pool Settings
SPRING_DS_MIN_IDLE=5
SPRING_DS_MAX_POOL=20
SPRING_DS_CONN_TIMEOUT=30000

# ===== REDIS CONFIGURATION =====
# Local Redis
SPRING_DATA_REDIS_HOST_LOCAL=redis
SPRING_DATA_REDIS_PORT_LOCAL=6379

# AWS ElastiCache Redis
SPRING_DATA_REDIS_HOST_AWS=your-redis-cluster.cache.amazonaws.com
SPRING_DATA_REDIS_PORT_AWS=6379

# Production Redis
SPRING_DATA_REDIS_HOST_PROD=prod-redis
SPRING_DATA_REDIS_PORT_PROD=6379

# Active Redis Configuration
SPRING_DATA_REDIS_HOST=${SPRING_DATA_REDIS_HOST_LOCAL}
SPRING_DATA_REDIS_PORT=${SPRING_DATA_REDIS_PORT_LOCAL}
SPRING_DATA_REDIS_PASSWORD=
SPRING_DATA_REDIS_TIMEOUT=5000
SPRING_DATA_REDIS_POOL_MAX_ACTIVE=8
SPRING_DATA_REDIS_POOL_MAX_IDLE=8
SPRING_DATA_REDIS_POOL_MIN_IDLE=0
SPRING_DATA_REDIS_POOL_MAX_WAIT=-1ms

# ===== DYNAMODB CONFIGURATION =====
AWS_DYNAMODB_REGION=us-west-2

# Local DynamoDB - Standard test credentials
AWS_DYNAMODB_END_POINT_LOCAL=http://dynamodb:8000
AWS_DYNAMODB_ACCESS_KEY_LOCAL=localtest
AWS_DYNAMODB_ACCESS_PASS_LOCAL=localtest

# AWS DynamoDB
AWS_DYNAMODB_END_POINT_AWS=
AWS_DYNAMODB_ACCESS_KEY_AWS=${AWS_ACCESS_KEY_ID}
AWS_DYNAMODB_ACCESS_PASS_AWS=${AWS_SECRET_ACCESS_KEY}

# Active DynamoDB Configuration
AWS_DYNAMODB_END_POINT=${AWS_DYNAMODB_END_POINT_LOCAL}
AWS_DYNAMODB_ACCESS_KEY=${AWS_DYNAMODB_ACCESS_KEY_LOCAL}
AWS_DYNAMODB_ACCESS_PASS=${AWS_DYNAMODB_ACCESS_PASS_LOCAL}

# ===== APPLICATION CONFIGURATION =====
TICKETS_BOOTSTRAP_VENUE_REDIS=true

# ===== AWS SPECIFIC SETTINGS =====
# AWS Region
AWS_REGION=us-west-2

# AWS Load Balancer Health Check Path
HEALTH_CHECK_PATH=/actuator/health

# AWS CloudWatch Logging
LOGGING_LEVEL_ORG_JAVA=INFO
LOGGING_APPENDER=cloudwatch

# ===== MONITORING & OBSERVABILITY =====
# Application Performance Monitoring
MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always

# Distributed Tracing (for AWS X-Ray)
SPRING_SLEUTH_ENABLED=true
SPRING_SLEUTH_ZIPKIN_ENABLED=false
SPRING_SLEUTH_XRAY_ENABLED=false