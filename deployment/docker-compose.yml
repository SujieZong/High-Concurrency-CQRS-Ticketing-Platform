networks:
  ticketing-net: { }

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "PING" ]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [ ticketing-net ]

  mysql:
    image: mysql:8.0
    container_name: mysql-ticketing
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: ticket_platform
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks: [ ticketing-net ]

  kafka-1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-1
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - CLUSTER_ID=${CLUSTER_ID}
    networks: [ ticketing-net ]
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1" ]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 20s

  kafka-2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-2
    environment:
      - KAFKA_NODE_ID=2
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - CLUSTER_ID=${CLUSTER_ID}
    networks: [ ticketing-net ]
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1" ]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 20s

  kafka-3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-3
    environment:
      - KAFKA_NODE_ID=3
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka-3:9092
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - CLUSTER_ID=${CLUSTER_ID}
    networks: [ ticketing-net ]
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1" ]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 20s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8088:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=ticketing
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:9092,kafka-2:9092,kafka-3:9092
    depends_on:
      kafka-1:
        condition: service_healthy
    networks: [ ticketing-net ]

  # —— API ——
  purchase-service:
    networks: [ ticketing-net ]
    build:
      context: ../PurchaseService
      dockerfile: Dockerfile
    image: purchase-service:latest
    ports:
      - "8080:8080"

    environment:
      SPRING_PROFILES_ACTIVE: docker

      # Redis
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379

    depends_on:
      redis: { condition: service_healthy }
      kafka-1: { condition: service_healthy }
      kafka-2: { condition: service_healthy }
      kafka-3: { condition: service_healthy }

    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"'" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  # —— Query Service —— MySQL
  query-service:
    networks: [ ticketing-net ]
    build:
      context: ../QueryService
      dockerfile: Dockerfile
    image: query-service:latest
    ports:
      - "8081:8080"

    environment:
      # MySQL
      SPRING_PROFILES_ACTIVE: docker

      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}

      # Hikar pool setting
      SPRING_DS_MIN_IDLE: 5
      SPRING_DS_MAX_POOL: 20
      SPRING_DS_CONN_TIMEOUT: 30000

    depends_on:
      mysql: { condition: service_healthy }

    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"'" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  # —— MQ Projection Service —— MySQL, Kafka
  mq-projection-service:
    networks: [ ticketing-net ]
    build:
      context: ../MqProjectionService
      dockerfile: Dockerfile
    image: mq-projection-service:latest
    container_name: mq-projection-service

    environment:
      SPRING_PROFILES_ACTIVE: docker

      # MySQL
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}

    depends_on:
      mysql: { condition: service_healthy }
      kafka-1: { condition: service_healthy }
      kafka-2: { condition: service_healthy }
      kafka-3: { condition: service_healthy }
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"'" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s