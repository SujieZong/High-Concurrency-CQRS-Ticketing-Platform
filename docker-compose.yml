# docker-compose.yml 放在项目根目录，与 TicketingPlatform/、RabbitCombinedConsumer/ 平级
networks:
  ticketing-net: { }

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "PING" ]
      interval: 5s
      timeout: 3s
      retries: 10
    networks: [ ticketing-net ]

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [ ticketing-net ]


  kafka-1:
    image: bitnami/kafka:latest
    container_name: kafka-1
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=2
      - KAFKA_KRAFT_CLUSTER_ID=${CLUSTER_ID}
    networks: [ ticketing-net ]
    healthcheck:
      test: [ "CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1" ]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 20s

  kafka-2:
    image: bitnami/kafka:latest
    container_name: kafka-2
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=2
      - KAFKA_KRAFT_CLUSTER_ID=${CLUSTER_ID}
    networks: [ ticketing-net ]
    healthcheck:
      test: [ "CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1" ]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 20s

  kafka-3:
    image: bitnami/kafka:latest
    container_name: kafka-3
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9093,2@kafka-2:9093,3@kafka-3:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-3:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - KAFKA_CFG_MIN_INSYNC_REPLICAS=2
      - KAFKA_KRAFT_CLUSTER_ID=${CLUSTER_ID}
    networks: [ ticketing-net ]
    healthcheck:
      test: [ "CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1" ]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 20s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8088:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=ticketing
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-1:9092,kafka-2:9092,kafka-3:9092
    depends_on:
      kafka-1:
        condition: service_healthy
    networks: [ ticketing-net ]

  dynamodb:
    image: amazon/dynamodb-local
    ports:
      - "8000:8000"
    command: [ "-jar","DynamoDBLocal.jar","-sharedDb" ] #share across regions
    # could add volume here to make DynamoDB permanent
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/8000 || exit 1" ]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 10s
    networks: [ ticketing-net ]


  # —— API ——
  # —— Purchase Service —— Redis, Dynamo, Rabbit
  purchase-service:
    networks: [ ticketing-net ]
    build:
      context: ./PurchaseService
      dockerfile: Dockerfile
    image: purchase-service:latest
    ports:
      - "8080:8080"

    environment:
      SPRING_PROFILES_ACTIVE: docker

      # Redis
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379

      # RabbitMQ
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest

      # DynamoDB Local
      AWS_DYNAMODB_END_POINT: http://dynamodb:8000
      AWS_DYNAMODB_REGION: us-west-2
      AWS_DYNAMODB_ACCESS_KEY: id
      AWS_DYNAMODB_ACCESS_PASS: key

      # MySQL
      SPRING_DATASOURCE_URL: jdbc:mysql://host.docker.internal:3306/ticket_platform?serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Qweasd123
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.MySQLDialect

      # Hikar pool setting
      SPRING_DS_MIN_IDLE: 5
      SPRING_DS_MAX_POOL: 20
      SPRING_DS_CONN_TIMEOUT: 30000

    depends_on:
      redis: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      dynamodb: { condition: service_healthy }
      kafka-1: { condition: service_healthy }
      kafka-2: { condition: service_healthy }
      kafka-3: { condition: service_healthy }

    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"'" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  # —— Query Service —— MySQL
  query-service:
    networks: [ ticketing-net ]
    build:
      context: ./QueryService
      dockerfile: Dockerfile
    image: query-service:latest
    ports:
      - "8081:8080"

    environment:
      # MySQL
      SPRING_PROFILES_ACTIVE: docker

      SPRING_DATASOURCE_URL: jdbc:mysql://host.docker.internal:3306/ticket_platform?serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Qweasd123

      # Hikar pool setting
      SPRING_DS_MIN_IDLE: 5
      SPRING_DS_MAX_POOL: 20
      SPRING_DS_CONN_TIMEOUT: 30000

    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"'" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s

  # —— Consumer —— MySQL, Rabbit
  rabbit-consumer:
    networks: [ ticketing-net ]
    build:
      context: ./RabbitCombinedConsumer
      dockerfile: Dockerfile
    image: rabbit-consumer:latest
    container_name: rabbit-consumer

    environment:
      SPRING_PROFILES_ACTIVE: docker

      # RabbitMQ
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest

      # MySQL
      SPRING_DATASOURCE_URL: jdbc:mysql://host.docker.internal:3306/ticket_platform?serverTimezone=UTC
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: Qweasd123

    depends_on:
      rabbitmq: { condition: service_healthy }
      dynamodb: { condition: service_healthy }
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:8080/actuator/health | grep -q '\"status\":\"UP\"'" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 40s